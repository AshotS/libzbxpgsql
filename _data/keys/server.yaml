---
- key: pg.modver
  description: Returns the version string of the loaded `libzbxpgsql` module
  type: Text

- key: pg.connect
  description: >
    Monitor the availability of a PostgreSQL server. Returns 1 if
    the Zabbix Agent can connect to the given PostgreSQL database with the
    specified connection string.

    If you are using connection pooling, the connection string specified in
    this key should bypass your pooling agent to better reflect the
    availability of your PostgreSQL server. All other keys can be safely
    rerouted through a pooling agent.

    To monitor the availability of a connection pooler, create a second item
    with this key.

  type: Numeric (Unsigned)
  value-map: 
    0: Failure
    1: Success
  example: pg.connect[host=pg-server port=5432 connect_timeout=10,zabbix]

- key: pg.version
  description: >
    Returns the version string of the connected PostgreSQL Server
  type: Text
  sample: PostgreSQL 9.4.4 on x86_64-unknown-linux-gnu, compiled by gcc (GCC) 4.8.3 20140911 (Red Hat 4.8.3-9), 64-bit
  source: SELECT version();

- key: pg.starttime
  description: >
    Returns the UTC timestamp that the PostgreSQL server process started
  type: Text
  source: SELECT pg_postmaster_start_time();

- key: pg.uptime
  description: >
    Returns the number of seconds since the PostgreSQL server process started
  type: Numeric (Unsigned)
  units: Seconds
  source: SELECT EXTRACT(EPOCH FROM NOW()) - EXTRACT(EPOCH FROM pg_postmaster_start_time());

- key: pg.setting.discovery
  description: >
    Returns a JSON array of all known settings available for monitoring.

    This key is useful for monitoring changes to all configuration values if
    needed. The more recommended practice however, is to manually define keys
    in your template for settings that are important to you which may then also
    be used in composite graphs, triggers, etc.
  type: Discovery
  macros:
    - macro: "{#SETTING}"
      description: Run-time configuration parameter name
    - macro: "{#UNIT}"
      description: Implicit unit of the parameter
    - macro: "{#CATEGORY}"
      description: A brief description of the parameter
    - macro: "{#CONTEXT}"
      description: Context required to set the parameter's value
    - macro: "{#VARTYPE}"
      description: Parameter type (`bool`, `enum`, `integer`, `real`, or `string`)
  source: >
    SELECT
      name AS setting
      , unit AS unit
      , category AS category
      , short_desc AS description
      , context AS context
      , vartype AS vartype
    FROM pg_settings;

- key: pg.setting
  description: >
    Returns the value of the specified run-time configuration setting. This key is
    useful for validating and monitoring changes to configuration items such as
    the PostgreSQL data directory, share buffers, log file locations, etc.

    The return type is determined by the PostgreSQL `vartype` of the requested
    setting.

    For more information, see
    [pg_setting](http://www.postgresql.org/docs/9.4/static/view-pg-settings.html).

  type: pg_settings.vartype
  parameters: 
    - parameter: setting
      description: the name of the setting to return
  source: SELECT setting,vartype FROM pg_settings WHERE ...
  example: pg.setting[,,data_directory]

- key: pg.backends.count
  description: Returns the number of active backend processes for remote connections.
  type: Numeric (unsigned)
  superuser: true
  parameters: 
    - parameter: database
      description: database name or OID (may be different to the connected database)

    - parameter: user
      description: user name or OID

    - parameter: client
      description: >
        client hostname or IP address (hostname only supported on PostgreSQL
        v9.1 and above)

    - parameter: waiting
      description: processes waiting on a lock
      options: 
        - option: true
          description: only return waiting processes
        - option: false
          description: only return processes that are not waiting
        - option: default
          description: no filtering based on waiting status

  source: SELECT COUNT(datid) FROM pg_stat_activity WHERE pid != pg_backend_pid();
  example: pg.backends.count[,,mydb,dbuser,myapp,::1,,active]

- key: pg.queries.longest
  description: >
    Returns the duration of the longest running, currently active query in
    seconds or 0 if no queries are active.

    Stats are only returned for backends owned by the connected role unless the
    role is a superuser (not recommended).
  type: Numeric (float)
  units: Seconds
  superuser: true
  source: >
    SELECT
      COALESCE(
        (SELECT
          EXTRACT(EPOCH FROM NOW()) - EXTRACT(EPOCH FROM query_start) AS duration
        FROM pg_stat_activity
        WHERE
          state = 'active'
          AND pid != pg_backend_pid()
        ORDER BY duration DESC
        LIMIT 1), 0);
  parameters: 
    - parameter: database
      description: database name or OID (may be different to the connected database)

    - parameter: user
      description: user name or OID

    - parameter: client
      description: client hostname or IP address

    - parameter: waiting
      description: processes waiting on a lock
      options: 
        - option: true
          description: only return waiting processes
        - option: false
          description: only return processes that are not waiting
        - option: default
          description: no filtering based on waiting status

- key: pg.checkpoints_timed
  description: >
    Returns the number of scheduled checkpoints that have been performed
  type: Numeric (unsigned)
  source: SELECT checkpoints_timed FROM pg_stat_bgwriter

- key: pg.checkpoints_req
  description: >
    Returns the number of requested checkpoints that have been performed
  type: Numeric (unsigned)
  source: SELECT checkpoints_req FROM pg_stat_bgwriter

- key: pg.checkpoint_write_time
  description: >
    Returns the total amount of time that has been spent in the portion of
    checkpoint processing where files are written to disk, in milliseconds
  type: Numeric (float)
  units: Milliseconds
  require: 9.2
  source: SELECT checkpoint_write_time FROM pg_stat_bgwriter

- key: pg.checkpoint_sync_time
  description: >
    Returns the total amount of time that has been spent in the portion of
    checkpoint processing where files are synchronized to disk, in milliseconds
  type: Numeric (float)
  units: Milliseconds
  require: 9.2
  source: SELECT checkpoint_sync_time FROM pg_stat_bgwriter

- key: pg.checkpoint_avg_interval
  description: >
    Returns the average interval in seconds between each checkpoint that has
    occurred since statistics were reset, or 0 if no checkpoints have occurred.

  type: Numeric (float)
  units: Seconds
  require: 9.2
  source: >
    SELECT
      CASE checkpoints_timed + checkpoints_req
        WHEN 0 THEN 0
        ELSE EXTRACT(EPOCH FROM (NOW() - stats_reset)) / (checkpoints_timed + checkpoints_req)
      END
    FROM pg_stat_bgwriter;

- key: pg.checkpoint_time_ratio
  description: >
    Returns the percentage of time spent writing or syncing checkpoints since
    statistics were reset as a fraction of 1.

    Ideally, this should return the percentage of time spent checkpointing
    since the server started, but unfortunately statistics are not reset when
    the server restarts. Please just note that server uptime will influence
    the results (e.g. if the server has been down 50% since it last reset
    statistics, it will appear it spent 50% less time writing checkpoints).
  type: Numeric (float)
  units: "%"
  require: 9.2
  parameters:
    - parameter: action
      description: Action to measure (`write`, `sync` or `all`)
      default: Time spent writing or syncing checkpoints (`all`)
  source: >
    SELECT
      ((checkpoint_write_time + checkpoint_sync_time) / 1000) / EXTRACT(EPOCH FROM NOW() - stats_reset)
    FROM pg_stat_bgwriter;

- key: pg.buffers_checkpoint
  description: Returns the number of buffers written during checkpoints
  type: Numeric (unsigned)
  source: SELECT buffers_checkpoint FROM pg_stat_bgwriter

- key: pg.buffers_clean
  description: Returns the number of buffers written by the background writer
  type: Numeric (unsigned)
  source: SELECT buffers_clean FROM pg_stat_bgwriter

- key: pg.maxwritten_clean
  description: >
    Returns the number of times the background writer stopped a cleaning scan
    because it had written too many buffers
  type: Numeric (unsigned)
  source: SELECT maxwritten_clean FROM pg_stat_bgwriter

- key: pg.buffers_backend
  description: Returns the number of buffers written directly by a backend
  type: Numeric (unsigned)
  source: SELECT buffers_backend FROM pg_stat_bgwriter

- key: pg.buffers_backend_fsync
  description: >
    Returns the number of times a backend had to execute its own fsync call
    (normally the background writer handles those even when the backend does
    its own write)
  type: Numeric (unsigned)
  source: SELECT buffers_backend_fsync FROM pg_stat_bgwriter
  require: 9.1

- key: pg.buffers_alloc
  description: Returns the number of buffers allocated
  type: Numeric (unsigned)
  source: SELECT buffers_alloc FROM pg_stat_bgwriter

- key: pg.stats_reset
  description: Returns the time at which these statistics were last reset
  type: Text
  source: SELECT stats_reset FROM pg_stat_bgwriter
  require: 9.1
